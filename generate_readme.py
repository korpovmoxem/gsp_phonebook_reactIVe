import os
from pathlib import Path

OBSIDIAN_DIR = 'docs'
README_PATH = 'README.md'

def merge_markdown_files():
    obsidian_root = Path(OBSIDIAN_DIR)
    readme_content = []

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞
    def process_directory(path: Path, level=1):
        """level ‚Äî —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)"""
        if path.name.startswith('.'):
            print(f"{'   ' * (level - 1)}üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–∞–ø–∫—É: {path.name}")
            return

        print(f"{'   ' * (level - 1)}üìÅ –ü–∞–ø–∫–∞: {path.name}")
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–∞–ø–∫–∏
        header_level = '#' * level
        readme_content.append(f"{header_level} {path.name}\n\n")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º .md —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
        files = sorted([f for f in path.glob("*.md") if not f.name.startswith('.')])
        for file in files:
            print(f"{'   ' * level}üìÑ –§–∞–π–ª: {file.name}")
            with open(file, 'r', encoding='utf-8') as f:
                content = f.read()

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
            readme_content.append(f"## {file.stem}\n\n")
            readme_content.append(content + "\n\n")

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ (–±–µ–∑ —Ç–æ—á–µ—á–Ω—ã—Ö)
        sub_dirs = sorted([d for d in path.iterdir() if d.is_dir() and not d.name.startswith('.')])
        for sub_dir in sub_dirs:
            process_directory(sub_dir, level + 1)

    # 1. –ö–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã (–±–µ–∑ —Ç–æ—á–µ—á–Ω—ã—Ö)
    root_files = sorted([f for f in obsidian_root.glob("*.md") if not f.name.startswith('.')])

    if root_files:
        print(f"[INFO] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(root_files)} –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        readme_content.append(f"# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä —á–µ—Ä–µ–∑ Obsidian\n\n")

        for file in root_files:
            print(f"üìÑ –ö–æ—Ä–Ω–µ–≤–æ–π —Ñ–∞–π–ª: {file.name}")
            with open(file, 'r', encoding='utf-8') as f:
                content = f.read()
            readme_content.append(f"## {file.stem}\n\n")
            readme_content.append(content + "\n\n")
    else:
        print("[WARN] –ù–µ—Ç –∫–æ—Ä–Ω–µ–≤—ã—Ö .md —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –æ–Ω–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Ç–æ—á–∫–∏")

    # 2. –ü–æ–¥–ø–∞–ø–∫–∏ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
    root_dirs = [d for d in obsidian_root.iterdir() if d.is_dir()]
    valid_root_dirs = [d for d in root_dirs if not d.name.startswith('.')]

    if valid_root_dirs:
        print(f"[INFO] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(valid_root_dirs)} –ø–æ–¥–ø–∞–ø–æ–∫...")

        for dir_path in sorted(valid_root_dirs):
            process_directory(dir_path, level=1)
    else:
        print("[WARN] –ù–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–æ–¥–ø–∞–ø–æ–∫")

    # –ó–∞–ø–∏—Å—å –≤ README.md
    with open(README_PATH, 'w', encoding='utf-8') as readme:
        readme.write('\n'.join(readme_content))

    print(f"[INFO] README —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {README_PATH}")

if __name__ == "__main__":
    merge_markdown_files()