services:
  - docker-hub.nexus.infr.gsprom.local/docker:dind

stages:
  - test
  - build
  - deploy

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  # Опционально: увеличим лимиты для тяжёлых сборок
  DOCKER_DRIVER: overlay2

cache:
  paths:
    - backend/__pycache__
    - frontend/node_modules/

before_script:
  - echo "Подготовка среды..."
  - echo "SKIP_TESTS = $SKIP_TESTS"

test_backend:
  stage: test
  image: docker-hub.nexus.infr.gsprom.local/ubuntu:22.04
  rules:
    - if: '$SKIP_TESTS == "true"'
      when: never
    - when: always
  script:
    - |
      echo "deb http://ubuntu.repo.gsprom.local/ubuntu jammy main restricted universe multiverse" > /etc/apt/sources.list
      echo "deb http://ubuntu.repo.gsprom.local/ubuntu jammy-updates main restricted universe multiverse" >> /etc/apt/sources.list
      echo "deb http://ubuntu.repo.gsprom.local/ubuntu jammy-security main restricted universe multiverse" >> /etc/apt/sources.list

    - echo 'Acquire::GPGCheck "0";' > /etc/apt/apt.conf.d/01-no-gpg-check

    - apt-get clean
    - apt-get update

    - apt-get install -y --no-install-recommends python3 python3-pip unixodbc-dev gcc g++ make libffi-dev libssl-dev build-essential curl ca-certificates

    # Установка ODBC драйвера
    - curl -k -sSL -o packages-microsoft-prod.deb "https://nexus.infr.gsprom.local/repository/microsoft-ubuntu/config/ubuntu/22.04/packages-microsoft-prod.deb"
    - dpkg -i packages-microsoft-prod.deb
    - echo 'Acquire::https::Verify-Peer "false";' > /etc/apt/apt.conf.d/99-insecure-https
    - echo "deb [arch=amd64,arm64,armhf signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://nexus.infr.gsprom.local/repository/microsoft-ubuntu/ubuntu/22.04/prod  jammy main" | tee /etc/apt/sources.list.d/microsoft-prod.list > /dev/null
    - apt-get update
    - ACCEPT_EULA=Y apt-get install -y msodbcsql17
    - echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
    - source ~/.bashrc

    - pip install --trusted-host nexus.infr.gsprom.local --index-url https://nexus.infr.gsprom.local/repository/pip/simple  -r backend/requirements.txt

    - pytest backend

  artifacts:
    reports:
      junit: backend/*.xml

test_frontend:
  image: docker-hub.nexus.infr.gsprom.local/node:22
  stage: test
  rules:
    - if: '$SKIP_TESTS == "true"'
      when: never
    - when: always
  script:
    - npm config set registry https://nexus.infr.gsprom.local/repository/npm-files/
    - npm config set registry https://nexus.infr.gsprom.local/repository/npm/
    - npm config set strict-ssl false
    - cd frontend
    - npm install --legacy-peer-deps
    - npm run test
  artifacts:
    reports:
      junit: frontend/*.xml

build_backend:
  stage: build
  image: docker-hub.nexus.infr.gsprom.local/docker:28.3.3
  rules:
    - if: '$SKIP_BUILD == "true"'
      when: never
    - when: always
  services:
    - name: docker-hub.nexus.infr.gsprom.local/docker:28.3.3-dind
      alias: docker
      command:
        [
          "dockerd",
          "--host=tcp://0.0.0.0:2375",
          "--insecure-registry=phonebook.nexus.infr.gsprom.local",
          "--insecure-registry=docker-hub.nexus.infr.gsprom.local",
        ]
  before_script:
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        IMAGE_TAG="$CI_COMMIT_BRANCH-$CI_COMMIT_TAG"
      elif [ "$CI_COMMIT_BRANCH" = "main" ]; then
        IMAGE_TAG="main"
      elif [ "$CI_COMMIT_BRANCH" = "dev" ]; then
        IMAGE_TAG="dev"
      else
        BRANCH_NAME=$(echo "$CI_COMMIT_BRANCH" | tr '/' '-')
        IMAGE_TAG="$BRANCH_NAME"
      fi
  script:
    - docker login -u $CI_REGISTRY_PASSWORD -p $CI_REGISTRY_USER phonebook.nexus.infr.gsprom.local
    - docker build -t phonebook.nexus.infr.gsprom.local/phonebook/backend:$IMAGE_TAG backend
    - docker push phonebook.nexus.infr.gsprom.local/phonebook/backend:$IMAGE_TAG

build_frontend:
  stage: build
  image: docker-hub.nexus.infr.gsprom.local/docker:28.3.3
  rules:
    - if: '$SKIP_BUILD == "true"'
      when: never
    - when: always
  services:
    - name: docker-hub.nexus.infr.gsprom.local/docker:28.3.3-dind
      alias: docker
      command:
        [
          "dockerd",
          "--host=tcp://0.0.0.0:2375",
          "--insecure-registry=phonebook.nexus.infr.gsprom.local",
          "--insecure-registry=docker-hub.nexus.infr.gsprom.local",
        ]
  before_script:
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        IMAGE_TAG="$CI_COMMIT_BRANCH-$CI_COMMIT_TAG"
      elif [ "$CI_COMMIT_BRANCH" = "main" ]; then
        IMAGE_TAG="main"
      elif [ "$CI_COMMIT_BRANCH" = "dev" ]; then
        IMAGE_TAG="dev"
      else
        BRANCH_NAME=$(echo "$CI_COMMIT_BRANCH" | tr '/' '-')
        IMAGE_TAG="$BRANCH_NAME"
      fi
  script:
    - docker login -u $CI_REGISTRY_PASSWORD -p $CI_REGISTRY_USER phonebook.nexus.infr.gsprom.local
    - docker build -t phonebook.nexus.infr.gsprom.local/phonebook/frontend:$IMAGE_TAG frontend
    - docker push phonebook.nexus.infr.gsprom.local/phonebook/frontend:$IMAGE_TAG

deploy_test:
  stage: deploy
  image: docker-hub.nexus.infr.gsprom.local/ubuntu:22.04
  variables:
    DEPLOY_PATH: /opt/phonebook-test
  before_script:
    - echo "deb http://ubuntu.repo.gsprom.local/ubuntu jammy main restricted universe multiverse" > /etc/apt/sources.list
    - echo "deb http://ubuntu.repo.gsprom.local/ubuntu jammy-updates main restricted universe multiverse" >> /etc/apt/sources.list
    - echo "deb http://ubuntu.repo.gsprom.local/ubuntu jammy-security main restricted universe multiverse" >> /etc/apt/sources.list
    - apt-get update && apt-get install -y openssh-client sshpass
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile /dev/null" > ~/.ssh/config

    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        IMAGE_TAG="$CI_COMMIT_BRANCH-$CI_COMMIT_TAG"
      elif [ "$CI_COMMIT_BRANCH" = "main" ]; then
        IMAGE_TAG="main"
      elif [ "$CI_COMMIT_BRANCH" = "dev" ]; then
        IMAGE_TAG="dev"
      else
        BRANCH_NAME=$(echo "$CI_COMMIT_BRANCH" | tr '/' '-')
        IMAGE_TAG="$BRANCH_NAME"
      fi

  script:
    - sshpass -p "$TEST_SERVER_PASSWORD" ssh $TEST_SERVER_LOGIN@$TEST_SERVER_IP "mkdir -p $DEPLOY_PATH"
    - sshpass -p $TEST_SERVER_PASSWORD scp docker-compose.yml $TEST_SERVER_LOGIN@$TEST_SERVER_IP:$DEPLOY_PATH
    - sshpass -p $TEST_SERVER_PASSWORD scp prometheus.yml $TEST_SERVER_LOGIN@$TEST_SERVER_IP:$DEPLOY_PATH
    - sshpass -p $TEST_SERVER_PASSWORD ssh $TEST_SERVER_LOGIN@$TEST_SERVER_IP "
      cd $DEPLOY_PATH &&
      export BACKEND_TAG=$IMAGE_TAG &&
      export FRONTEND_TAG=$IMAGE_TAG &&
      export DB_USER=$DB_USER &&
      export DB_PASSWORD=$DB_PASSWORD &&
      export DB_HOST=$DB_HOST &&
      export DB_PORT=$DB_PORT &&
      export DB_NAME=$DB_NAME &&
      export REDIS_HOST=$REDIS_HOST &&
      export REDIS_PORT=$REDIS_PORT &&
      export REDIS_TIMEOUT=$REDIS_TIMEOUT &&
      export SMTP_SERVER=$SMTP_SERVER &&
      export SMTP_PORT=$SMTP_PORT &&
      export SMTP_USER=$SMTP_USER &&
      export SMTP_DISPLAY_NAME=$SMTP_DISPLAY_NAME &&
      export SMTP_PASSWORD=$SMTP_PASSWORD &&
      export STORAGE_ACCESS_KEY=$STORAGE_ACCESS_KEY &&
      export STORAGE_SECRET_KEY=$STORAGE_SECRET_KEY &&
      export STORAGE_URL=$STORAGE_URL &&
      export BACKEND_WORKERS=24 &&
      export DEPLOY_PATH=$DEPLOY_PATH &&
      docker compose pull &&
      docker compose up -d &&
      docker compose ps
      "
  environment:
    name: test
  only:
    - dev

deploy_prod:
  stage: deploy
  image: docker-hub.nexus.infr.gsprom.local/ubuntu:22.04
  variables:
    DEPLOY_PATH: /opt/phonebook-test
  before_script:
    - echo "deb http://ubuntu.repo.gsprom.local/ubuntu jammy main restricted universe multiverse" > /etc/apt/sources.list
    - echo "deb http://ubuntu.repo.gsprom.local/ubuntu jammy-updates main restricted universe multiverse" >> /etc/apt/sources.list
    - echo "deb http://ubuntu.repo.gsprom.local/ubuntu jammy-security main restricted universe multiverse" >> /etc/apt/sources.list
    - apt-get update && apt-get install -y openssh-client sshpass
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile /dev/null" > ~/.ssh/config

    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        IMAGE_TAG="$CI_COMMIT_BRANCH-$CI_COMMIT_TAG"
      elif [ "$CI_COMMIT_BRANCH" = "main" ]; then
        IMAGE_TAG="main"
      elif [ "$CI_COMMIT_BRANCH" = "dev" ]; then
        IMAGE_TAG="dev"
      else
        BRANCH_NAME=$(echo "$CI_COMMIT_BRANCH" | tr '/' '-')
        IMAGE_TAG="$BRANCH_NAME"
      fi

  script:
    - sshpass -p "$PROD_SERVER_PASSWORD" ssh $PROD_SERVER_LOGIN@$PROD_SERVER_IP "mkdir -p $DEPLOY_PATH"
    - sshpass -p $PROD_SERVER_PASSWORD scp docker-compose.yml $PROD_SERVER_LOGIN@$PROD_SERVER_IP:$DEPLOY_PATH
    - sshpass -p $PROD_SERVER_PASSWORD ssh $PROD_SERVER_LOGIN@$PROD_SERVER_IP "
      cd $DEPLOY_PATH &&
      export BACKEND_TAG=$IMAGE_TAG &&
      export FRONTEND_TAG=$IMAGE_TAG &&
      export DB_USER=$DB_USER &&
      export DB_PASSWORD=$DB_PASSWORD &&
      export DB_HOST=$DB_HOST &&
      export DB_PORT=$DB_PORT &&
      export DB_NAME=$DB_NAME &&
      export REDIS_HOST=$REDIS_HOST &&
      export REDIS_PORT=$REDIS_PORT &&
      export REDIS_TIMEOUT=$REDIS_TIMEOUT &&
      export SMTP_SERVER=$SMTP_SERVER &&
      export SMTP_PORT=$SMTP_PORT &&
      export SMTP_USER=$SMTP_USER &&
      export SMTP_DISPLAY_NAME=$SMTP_DISPLAY_NAME &&
      export SMTP_PASSWORD=$SMTP_PASSWORD &&
      export STORAGE_ACCESS_KEY=$STORAGE_ACCESS_KEY &&
      export STORAGE_SECRET_KEY=$STORAGE_SECRET_KEY &&
      export STORAGE_URL=$STORAGE_URL &&
      export BACKEND_WORKERS=24 &&
      export DEPLOY_PATH=$DEPLOY_PATH &&
      docker compose pull &&
      docker compose up -d &&
      docker compose ps &&
      "
  environment:
    name: prod
  only:
    - main
